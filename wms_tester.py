"""Define a locust swarm for testing WMS on Geoserver EC.
"""

import csv
from itertools import cycle
from locust import HttpLocust, task
from wms_behavior import WMSBehavior


def load_bbox_data():
    """Load a data file containing example bboxes.

    These data should be generated by ./mercantile_gen
    """
    with open('wms_256_tiles.csv', newline='') as stream:
        # fieldnames = ['width','height','bottom','left','top','right']
        reader = csv.reader(stream)
        bbox_iterator = cycle(list(reader))
    return bbox_iterator


class WMSTester(WMSBehavior):
    """Exercise Geoserver EC WMS
    """

    # Load data at import time
    bbox_iterator = load_bbox_data()

    def on_start(self):
        """Startup method called by locust once for each new simulated user.
        """

    def check_content(self, response, expected):
        """Fail the response if content-type doesn't start with given prefix.
        """
        content_type = response.headers.get("Content-Type")
        if not content_type:
            response.failure("No Content-Type in response")
        elif not content_type.startswith(expected):
            message = "Expected content-type {0!r} but got {1!r}".format(
                expected, content_type,
            )
            response.failure(message)
        elif not response.content:
            response.failure("Empty response")
        else:
            response.success()

    @task(0)
    def wms_get_capabilities(self):
        """Exercise WMS GetCapabilities
        """
        response = self.get_capabilities("/geoserver/ows")
        self.check_content(response, "text/xml")

    @task(1)
    def wms_png_bbox(self):
        response = self.wms_get_map("image/png")
        self.check_content(response, "image/png")

    @task(1)
    def wms_png8_bbox(self):
        response = self.wms_get_map("image/png8")
        self.check_content(response, "image/png")

    @task(1)
    def wms_jpeg_bbox(self):
        response = self.wms_get_map("image/jpeg")
        self.check_content(response, "image/jpeg")

    @task(0)
    def wms_tiff_bbox(self):
        response = self.wms_get_map("image/tiff")
        self.check_content(response, "image/tiff")

    def wms_get_map(self, image_format):
        """Exercise WMS GetMap with the specified format
        """
        line = next(self.bbox_iterator)
        bbox = ",".join([line[1], line[0], line[3], line[2]])
        name = "WMS_{0}_BBOX".format(image_format.split("/")[-1])
        return self.get_map(
            uri="/geoserver/wms",
            layers="osm:osm",
            image_format=image_format,
            width=256,
            height=256,
            bbox=bbox,
            crs="EPSG:4326",
            name=name,
        )


class WebUser(HttpLocust):
    """Specify how each simulated user will behave.
    """
    # Define the behavior of the user.
    task_set = WMSTester

    # Parameters for generating the random wait between tasks.
    min_wait = 0
    max_wait = 0
